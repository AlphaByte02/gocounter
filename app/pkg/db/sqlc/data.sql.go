// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: data.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getData = `-- name: GetData :one
SELECT id, counter_id, value, recorded_at, created_at, updated_at FROM data
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetData(ctx context.Context, id uuid.UUID) (Datum, error) {
	row := q.db.QueryRow(ctx, getData, id)
	var i Datum
	err := row.Scan(
		&i.ID,
		&i.CounterID,
		&i.Value,
		&i.RecordedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listData = `-- name: ListData :many
SELECT id, counter_id, value, recorded_at, created_at, updated_at FROM data
ORDER BY id
`

func (q *Queries) ListData(ctx context.Context) ([]Datum, error) {
	rows, err := q.db.Query(ctx, listData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Datum
	for rows.Next() {
		var i Datum
		if err := rows.Scan(
			&i.ID,
			&i.CounterID,
			&i.Value,
			&i.RecordedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDataByCounter = `-- name: ListDataByCounter :many
SELECT id, counter_id, value, recorded_at, created_at, updated_at FROM data
WHERE counter_id = $1
ORDER BY id
`

func (q *Queries) ListDataByCounter(ctx context.Context, counterID uuid.UUID) ([]Datum, error) {
	rows, err := q.db.Query(ctx, listDataByCounter, counterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Datum
	for rows.Next() {
		var i Datum
		if err := rows.Scan(
			&i.ID,
			&i.CounterID,
			&i.Value,
			&i.RecordedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
